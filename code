#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// UUIDs for the services temp and humid
#define SERVICE_UUID        "00000002-0000-0000-FDFD-FDFDFDFDFDFD"
#define CHARACTERISTIC_UUID_TEMP   "2A6E"
#define CHARACTERISTIC_UUID_HUMID  "2A6F"

// Function for dummy sensor data
float readTemperature();
float readHumidity();

// BLE server and characteristics
BLEServer *pServer = NULL;
BLECharacteristic *pTempCharacteristic = NULL;
BLECharacteristic *pHumidCharacteristic = NULL;

void setup() 
{
  Serial.begin(115200);
  // Initialize BLE
  BLEDevice::init("ESP32_BLE");

  // Create BLE server
  pServer = BLEDevice::createServer();

  // Create BLE service
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Create BLE characteristics for temp and humid
  pTempCharacteristic = pService->createCharacteristic(
                         CHARACTERISTIC_UUID_TEMP,
                         BLECharacteristic::PROPERTY_READ |
                         BLECharacteristic::PROPERTY_NOTIFY
 );

  pHumidCharacteristic = pService->createCharacteristic(
                          CHARACTERISTIC_UUID_HUMID,
                          BLECharacteristic::PROPERTY_READ |
                          BLECharacteristic::PROPERTY_NOTIFY
    );

  // Adding descriptors to the characteristics
  pTempCharacteristic->addDescriptor(new BLE2902());
  pHumidCharacteristic->addDescriptor(new BLE2902());

  // Starting the service
  pService->start();

  // Starting advertise
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(false);
  pAdvertising->setMinPreferred(0x06);  // This is for i phone connection
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  Serial.println("Waiting for a client connection to notify...");
}

void loop() {
  // Sensor data
  float temperature = readTemperature();
  float humidity = readHumidity();

  // Update the characteristic values
  pTempCharacteristic->setValue(temperature);
  pHumidCharacteristic->setValue(humidity);

  // Notifying connected to clients
  pTempCharacteristic->notify();
  pHumidCharacteristic->notify();

  // Printing the values
  Serial.print("Temperature: ");
  Serial.print(temperature);
  Serial.print(" C, Humidity: ");
  Serial.print(humidity);
  Serial.println(" %");
  

  // Waiting for updating the values
  delay(1000);
}

// Generating of random values
float readTemperature() {
  return 25.0 + ((float)(esp_random() % 100) / 100.0); // Dummy temperature value
}

float readHumidity() {
  return 50.0 + ((float)(esp_random() % 100) / 100.0); // Dummy humidity value
}
